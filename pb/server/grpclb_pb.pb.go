// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpclb_pb.proto

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServiceStats int32

const (
	ServiceStats_STARTING ServiceStats = 0
	ServiceStats_RUN      ServiceStats = 1
	ServiceStats_STOP     ServiceStats = 2
)

var ServiceStats_name = map[int32]string{
	0: "STARTING",
	1: "RUN",
	2: "STOP",
}

var ServiceStats_value = map[string]int32{
	"STARTING": 0,
	"RUN":      1,
	"STOP":     2,
}

func (x ServiceStats) String() string {
	return proto.EnumName(ServiceStats_name, int32(x))
}

func (ServiceStats) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5b7615d362447bbe, []int{0}
}

type LoadReporterRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadReporterRequest) Reset()         { *m = LoadReporterRequest{} }
func (m *LoadReporterRequest) String() string { return proto.CompactTextString(m) }
func (*LoadReporterRequest) ProtoMessage()    {}
func (*LoadReporterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b7615d362447bbe, []int{0}
}

func (m *LoadReporterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadReporterRequest.Unmarshal(m, b)
}
func (m *LoadReporterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadReporterRequest.Marshal(b, m, deterministic)
}
func (m *LoadReporterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadReporterRequest.Merge(m, src)
}
func (m *LoadReporterRequest) XXX_Size() int {
	return xxx_messageInfo_LoadReporterRequest.Size(m)
}
func (m *LoadReporterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadReporterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadReporterRequest proto.InternalMessageInfo

type LoadReporterResponse struct {
	CurLoad              int64        `protobuf:"varint,1,opt,name=curLoad,proto3" json:"curLoad,omitempty"`
	State                ServiceStats `protobuf:"varint,2,opt,name=state,proto3,enum=server.ServiceStats" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LoadReporterResponse) Reset()         { *m = LoadReporterResponse{} }
func (m *LoadReporterResponse) String() string { return proto.CompactTextString(m) }
func (*LoadReporterResponse) ProtoMessage()    {}
func (*LoadReporterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b7615d362447bbe, []int{1}
}

func (m *LoadReporterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadReporterResponse.Unmarshal(m, b)
}
func (m *LoadReporterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadReporterResponse.Marshal(b, m, deterministic)
}
func (m *LoadReporterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadReporterResponse.Merge(m, src)
}
func (m *LoadReporterResponse) XXX_Size() int {
	return xxx_messageInfo_LoadReporterResponse.Size(m)
}
func (m *LoadReporterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadReporterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoadReporterResponse proto.InternalMessageInfo

func (m *LoadReporterResponse) GetCurLoad() int64 {
	if m != nil {
		return m.CurLoad
	}
	return 0
}

func (m *LoadReporterResponse) GetState() ServiceStats {
	if m != nil {
		return m.State
	}
	return ServiceStats_STARTING
}

func init() {
	proto.RegisterEnum("server.ServiceStats", ServiceStats_name, ServiceStats_value)
	proto.RegisterType((*LoadReporterRequest)(nil), "server.LoadReporterRequest")
	proto.RegisterType((*LoadReporterResponse)(nil), "server.LoadReporterResponse")
}

func init() { proto.RegisterFile("grpclb_pb.proto", fileDescriptor_5b7615d362447bbe) }

var fileDescriptor_5b7615d362447bbe = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x2f, 0x2a, 0x48,
	0xce, 0x49, 0x8a, 0x2f, 0x48, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x4e, 0x2d,
	0x2a, 0x4b, 0x2d, 0x52, 0x12, 0xe5, 0x12, 0xf6, 0xc9, 0x4f, 0x4c, 0x09, 0x4a, 0x2d, 0xc8, 0x2f,
	0x2a, 0x49, 0x2d, 0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x8a, 0xe1, 0x12, 0x41, 0x15,
	0x2e, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe0, 0x62, 0x4f, 0x2e, 0x2d, 0x02, 0x49, 0x49,
	0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0xc1, 0xb8, 0x42, 0x5a, 0x5c, 0xac, 0xc5, 0x25, 0x89, 0x25,
	0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0x22, 0x7a, 0x10, 0x0b, 0xf4, 0x82, 0x53, 0x8b,
	0xca, 0x32, 0x93, 0x53, 0x83, 0x4b, 0x12, 0x4b, 0x8a, 0x83, 0x20, 0x4a, 0xb4, 0xf4, 0xb9, 0x78,
	0x90, 0x85, 0x85, 0x78, 0xb8, 0x38, 0x82, 0x43, 0x1c, 0x83, 0x42, 0x3c, 0xfd, 0xdc, 0x05, 0x18,
	0x84, 0xd8, 0xb9, 0x98, 0x83, 0x42, 0xfd, 0x04, 0x18, 0x85, 0x38, 0xb8, 0x58, 0x82, 0x43, 0xfc,
	0x03, 0x04, 0x98, 0x8c, 0x12, 0x50, 0x5d, 0x09, 0xd5, 0x2c, 0xe4, 0xc9, 0xc5, 0x83, 0x2c, 0x2c,
	0x24, 0x0d, 0xb3, 0x14, 0x8b, 0x97, 0xa4, 0x64, 0xb0, 0x4b, 0x42, 0x3c, 0x96, 0xc4, 0x06, 0x0e,
	0x16, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xac, 0xe4, 0x06, 0x8e, 0x29, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoadReporterServiceClient is the client API for LoadReporterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoadReporterServiceClient interface {
	LoadReporter(ctx context.Context, in *LoadReporterRequest, opts ...grpc.CallOption) (*LoadReporterResponse, error)
}

type loadReporterServiceClient struct {
	cc *grpc.ClientConn
}

func NewLoadReporterServiceClient(cc *grpc.ClientConn) LoadReporterServiceClient {
	return &loadReporterServiceClient{cc}
}

func (c *loadReporterServiceClient) LoadReporter(ctx context.Context, in *LoadReporterRequest, opts ...grpc.CallOption) (*LoadReporterResponse, error) {
	out := new(LoadReporterResponse)
	err := c.cc.Invoke(ctx, "/server.LoadReporterService/LoadReporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadReporterServiceServer is the server API for LoadReporterService service.
type LoadReporterServiceServer interface {
	LoadReporter(context.Context, *LoadReporterRequest) (*LoadReporterResponse, error)
}

func RegisterLoadReporterServiceServer(s *grpc.Server, srv LoadReporterServiceServer) {
	s.RegisterService(&_LoadReporterService_serviceDesc, srv)
}

func _LoadReporterService_LoadReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadReporterServiceServer).LoadReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.LoadReporterService/LoadReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadReporterServiceServer).LoadReporter(ctx, req.(*LoadReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoadReporterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.LoadReporterService",
	HandlerType: (*LoadReporterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadReporter",
			Handler:    _LoadReporterService_LoadReporter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpclb_pb.proto",
}
